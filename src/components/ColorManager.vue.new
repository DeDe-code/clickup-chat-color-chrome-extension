<script setup>
/* global chrome */
import { ref, watch, onMounted, onUnmounted } from 'vue'
import { useColorPicker } from '../composables/useColorPicker.js'
import ColorInput from 'vue-color-input'
// Import the CSS directly from node_modules
import '../assets/vue-color-input.css'

const emit = defineEmits(['colorsChanged'])

const useClickUpTextColor = ref(false)
const useClickUpBackgroundColor = ref(false)

// Track color picker popover state
const isColorPickerOpen = ref(false)
let colorPickerObserver = null;

// Function to handle color picker open/close
function handleColorPickerToggle(isOpen) {
  isColorPickerOpen.value = isOpen

  if (isOpen) {
    document.body.classList.add('color-picker-open')
    document.documentElement.classList.add('color-picker-open')
  } else {
    document.body.classList.remove('color-picker-open')
    document.documentElement.classList.remove('color-picker-open')
  }
}

// Function to handle debug button click
function handleDebugButtonClick() {
  console.log('Debug button clicked - showing color picker popup state')
  const popovers = document.querySelectorAll('.v-color-input__popover')
  console.log('Found', popovers.length, 'color picker popovers')
  
  // Toggle the color picker open state
  if (!isColorPickerOpen.value) {
    handleColorPickerToggle(true)
  }
}

// Watch for DOM changes to detect when color picker is opened/closed
function setupColorPickerObserver() {
  const observer = new MutationObserver((mutations) => {
    // Check for v-color-input__popover elements being added or removed
    for (const mutation of mutations) {
      if (mutation.type === 'childList') {
        // Check for added nodes that are color picker popovers
        const popovers = document.querySelectorAll('.v-color-input__popover')
        const isVisible = popovers.length > 0;
        handleColorPickerToggle(isVisible)
      }
    }
  });

  // Observe the entire document for color picker elements
  observer.observe(document.body, {
    childList: true,
    subtree: true
  });

  return observer;
}

// Methods to handle color picker popover events
function handlePopoverOpen() {
  handleColorPickerToggle(true)
}

function handlePopoverClose() {
  handleColorPickerToggle(false)
}

onMounted(() => {
  // Setup color picker observer
  colorPickerObserver = setupColorPickerObserver()
})

onUnmounted(() => {
  if (colorPickerObserver) {
    colorPickerObserver.disconnect()
  }

  // Remove classes when component is destroyed
  document.body.classList.remove('color-picker-open')
  document.documentElement.classList.remove('color-picker-open')
})

// Load saved checkbox states
chrome.storage.local.get(['useClickUpTextColor', 'useClickUpBackgroundColor'], (result) => {
  useClickUpTextColor.value = !!result.useClickUpTextColor
  useClickUpBackgroundColor.value = !!result.useClickUpBackgroundColor

  emit('colorsChanged', {
    backgroundColor: useClickUpBackgroundColor.value
      ? 'var(--cu-background-primary)'
      : backgroundColor.value,
    textColor: useClickUpTextColor.value ? 'var(--cu-content-primary)' : textColor.value,
  })
})

const { backgroundColor, textColor } = useColorPicker('#fe5722', '#2097f3', (colors) => {
  emit('colorsChanged', {
    backgroundColor: useClickUpBackgroundColor.value
      ? 'var(--cu-background-primary)'
      : colors.backgroundColor,
    textColor: useClickUpTextColor.value ? 'var(--cu-content-primary)' : colors.textColor,
  })
})

// Watch for changes and emit updated values
watch([useClickUpTextColor, useClickUpBackgroundColor], () => {
  chrome.storage.local.set({
    useClickUpTextColor: useClickUpTextColor.value,
    useClickUpBackgroundColor: useClickUpBackgroundColor.value,
  })

  emit('colorsChanged', {
    backgroundColor: useClickUpBackgroundColor.value
      ? 'var(--cu-background-primary)'
      : backgroundColor.value,
    textColor: useClickUpTextColor.value ? 'var(--cu-content-primary)' : textColor.value,
  })
})
</script>

<template>
  <div class="color-manager">
    <div class="clickup-theme-toggle">
      <div class="clickup-text-toggle">
        <input type="checkbox" id="cu-theme" v-model="useClickUpTextColor" />
        <label for="cu-theme"> Use ClickUp theme colors </label>
      </div>
      <div class="clickup-bg-toggle">
        <input type="checkbox" id="cu-bg" v-model="useClickUpBackgroundColor" />
        <label for="cu-bg"> Use ClickUp background color </label>
      </div>
    </div>

    <div class="color-picker-wrapper">
      <!-- Debug button to help with visibility issues -->
      <button
        class="debug-button"
        type="button"
        @click="handleDebugButtonClick"
      >
        Show Color Picker Status
      </button>

      <div class="bg-picker-wrapper">
        <label for="background-picker">Background</label>
        <color-input
          id="background-picker"
          v-model="backgroundColor"
          :disabled="useClickUpBackgroundColor"
          popover-to="right"
          format="hex"
          custom-class="color-picker-background"
          @popover-open="handlePopoverOpen"
          @popover-close="handlePopoverClose"
        />
      </div>

      <div class="text-picker-wrapper">
        <label for="text-picker">Text</label>
        <color-input
          id="text-picker"
          v-model="textColor"
          :disabled="useClickUpTextColor"
          popover-to="right"
          format="hex"
          custom-class="color-picker-text"
          @popover-open="handlePopoverOpen"
          @popover-close="handlePopoverClose"
        />
      </div>
    </div>
  </div>
</template>

<style scoped>
.color-manager {
  display: flex;
  flex-direction: column;
  row-gap: 1rem;
}
.clickup-theme-toggle {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
  padding: 0.4rem;
  border: 1px solid var(--border-color, #dee2e6);
  border-radius: 0.3rem;
}
.clickup-text-toggle,
.clickup-bg-toggle {
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.color-picker-wrapper {
  display: flex;
  flex-direction: column;
  row-gap: 0.5rem;
  padding: 0.4rem;
  border: 1px solid var(--border-color, #dee2e6);
  border-radius: 0.3rem;
}
.bg-picker-wrapper,
.text-picker-wrapper {
  width: 100%;
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

/* Style the color input component */
:deep(.v-color-input) {
  width: 100%;
  margin: 0;
  border-radius: 0.3rem;
}

:deep(.v-color-input__control) {
  width: 100%;
  height: 32px !important;
  border-radius: 4px;
  transition: all 0.2s;
}

:deep(.v-color-input__control:hover) {
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}

/* Theme-specific styling */
:deep([data-theme='dark'] .v-color-input__control) {
  background-color: #333 !important;
  border-color: #555 !important;
}

:deep([data-theme='light'] .v-color-input__control) {
  background-color: white !important;
  border-color: #dee2e6 !important;
}

/* Debug button styling */
.debug-button {
  background-color: #4a90e2;
  color: white;
  border: none;
  border-radius: 4px;
  padding: 5px 10px;
  font-size: 12px;
  cursor: pointer;
  margin-bottom: 10px;
}

.debug-button:hover {
  background-color: #357abd;
}
</style>
